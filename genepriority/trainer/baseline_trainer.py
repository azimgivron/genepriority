from pathlib import Path
from typing import Any, Tuple, Union

import numpy as np
import scipy.sparse as sp

from genepriority.models.baseline import BaselineSession
from genepriority.preprocessing.dataloader import DataLoader
from genepriority.trainer.base import BaseTrainer


class BaselineTrainer(BaseTrainer):
    def __init__(
        self,
        dataloader: DataLoader,
        path: str,
        seed: int,
    ):
        super().__init__(dataloader, path, seed)

    def predict(
        self,
        session: Any,
    ) -> np.ndarray:
        """
        Extract predictions from the trained model.

        Args:
            session (Any): The trained session.

        Returns:
            np.ndarray: The predictions generated by the model.
        """
        y_pred = session.predict_all()
        return y_pred

    def create_session(
        self,
        iteration: int,
        train_mask: sp.csr_matrix,
        test_mask: sp.csr_matrix,
        num_latent: int,
        save_name: Union[str, Path],
        side_info: Tuple[sp.csr_matrix, sp.csr_matrix],
    ) -> BaselineSession:
        """
        Create a session for model training and evaluation.

        Args:
            iteration (int): The current iteration or fold index.
            train_mask (sp.csr_matrix): The training mask.
            test_mask (sp.csr_matrix): The test mask.
            num_latent (int): The number of latent dimensions for the model.
            save_name (Union[str, Path]): Filename or path for saving model snapshots.
            side_info (Tuple[sp.csr_matrix, sp.csr_matrix]): The side information
                for both genes and diseases.

        Returns:
            Any: A session object configured for training and evaluation.
        """
        return BaselineSession(
            self.dataloader.omim,
            self.dataloader.zero_sampling_factor,
            self.seed,
            save_name,
        )

    def pre_training_callback(self, session: Any, run_name: str):
        """
        Invoked before the training process starts for monitoring and debugging.

        Subclasses must implement this method to log or record relevant details
        about the training setup, such as metrics, hyperparameters, or configurations.
        Typical use cases include storing logs in files, databases, or visualization
        tools like TensorBoard.

        Args:
            session (Any): Represents the model's session.
            run_name (str): Unique identifier for the training session, used to
                organize logs or outputs.
        """

    def post_training_callback(
        self, training_status: Any, session: Any, test_mask: sp.csr_matrix
    ):
        """
        Invoked after the training process completes for monitoring and debugging.

        Subclasses must implement this method to log or record the outcomes of
        the training process, such as metrics, losses, and durations. Typical
        use cases include saving results to files, databases, or visualization
        tools like TensorBoard.

        Args:
            training_status (Any): Contains information about the training outcomes,
                such as performance metrics or final losses. The structure depends
                on the specific framework or implementation.
            session (Any): Represents the model's session, including configurations
                used during training.
            test_mask (sp.csr_matrix): Sparse matrix serving as a mask to identify
                the test set entries.
        """
